#When a number has more than two factors it is called a composite number. Here are the first few prime numbers: 
#2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 
#113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, etc.
isprime = 0
primes = []
puts "Calculate prime numbers up to..."
lim = gets.chomp.to_i
nprime = lim
tstart = Time.new
puts "Current time is #{tstart}"
while lim > 1

    while nprime > 0
        if lim%nprime == 0
            isprime += 1    
            nprime -= 1
        else
            nprime -= 1
        end
    end

    if isprime == 2
        primes << lim
        puts "#{lim} is a prime number"
        lim -= 1
        nprime = lim
        if nprime != 1
            puts "Now we check... #{nprime}"
        end
        isprime = 0
    else
        puts "#{lim} is not a prime number."
        lim -= 1
        nprime = lim
        if nprime != 1
            puts "Now we check... #{nprime}"
        end
        isprime = 0
    end

end

tdone = Time.new
tlast = tdone - tstart
puts "The calculation lasted #{tlast} seconds"

puts primes.sort.to_s
puts 'ANOTHER PROGRAAAAM'






#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?



#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, 
#the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of 
#the even-valued terms.

fone = 0
ftwo = 1
flast = 0
fibo = [1]
evensum = 0
puts "Type a number to calculate the Fibonaccis up to it..."
maxx = gets.chomp.to_i

while flast <= maxx
    flast = fone + ftwo
    if flast%2 == 0
        evensum += flast
    end
    fibo << flast
    fone = fibo[-2]
    ftwo = fibo.last
    puts fibo.to_s
end

puts "The sum of the even numbers is = #{evensum}." 

puts "lallalalala other program..."
#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.
imil = 2000
nsum = 0

while imil < 1000
    if imil%3 == 0
        nsum += imil
        imil += 1
        puts nsum
    elsif imil%5 == 0
        nsum += imil
        imil += 1
        puts nsum
    else
        imil += 1
    end
end





